// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace SE.Data.Models;

public partial class SeniorEssentialsContext : DbContext
{
    public SeniorEssentialsContext(DbContextOptions<SeniorEssentialsContext> options)
        : base(options)
    {
    }

    public SeniorEssentialsContext()
    {
    }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<ActivitySchedule> ActivitySchedules { get; set; }

    public virtual DbSet<BloodGlucose> BloodGlucoses { get; set; }

    public virtual DbSet<BloodPressure> BloodPressures { get; set; }

    public virtual DbSet<Book> Books { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<ContentProvider> ContentProviders { get; set; }

    public virtual DbSet<Elderly> Elderlies { get; set; }

    public virtual DbSet<EmergencyConfirmation> EmergencyConfirmations { get; set; }

    public virtual DbSet<EmergencyInformation> EmergencyInformations { get; set; }

    public virtual DbSet<FamilyMember> FamilyMembers { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<GroupMember> GroupMembers { get; set; }

    public virtual DbSet<HealthIndicatorBase> HealthIndicatorBases { get; set; }

    public virtual DbSet<HeartRate> HeartRates { get; set; }

    public virtual DbSet<Height> Heights { get; set; }

    public virtual DbSet<Iotdevice> Iotdevices { get; set; }

    public virtual DbSet<KidneyFunction> KidneyFunctions { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }

    public virtual DbSet<LipidProfile> LipidProfiles { get; set; }

    public virtual DbSet<LiverEnzyme> LiverEnzymes { get; set; }

    public virtual DbSet<Medication> Medications { get; set; }

    public virtual DbSet<MedicationSchedule> MedicationSchedules { get; set; }

    public virtual DbSet<Music> Musics { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Playlist> Playlists { get; set; }

    public virtual DbSet<Prescription> Prescriptions { get; set; }

    public virtual DbSet<Professor> Professors { get; set; }

    public virtual DbSet<ProfessorAppointment> ProfessorAppointments { get; set; }

    public virtual DbSet<ProfessorRating> ProfessorRatings { get; set; }

    public virtual DbSet<ProfessorSchedule> ProfessorSchedules { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Subscription> Subscriptions { get; set; }

    public virtual DbSet<TimeSlot> TimeSlots { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<UserLink> UserLinks { get; set; }

    public virtual DbSet<UserSubscription> UserSubscriptions { get; set; }

    public virtual DbSet<Weight> Weights { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Account__349DA5A682361505");

            entity.ToTable("Account");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.FullName).HasMaxLength(50);
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.Otp)
                .HasMaxLength(20)
                .HasColumnName("OTP");
            entity.Property(e => e.Password).HasMaxLength(100);
            entity.Property(e => e.PhoneNumber).HasMaxLength(20);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Account__RoleId__7D439ABD");
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.ActivityId).HasName("PK__Activity__45F4A791C7E62EA3");

            entity.ToTable("Activity");

            entity.Property(e => e.ActivityDescription).HasMaxLength(100);
            entity.Property(e => e.ActivityName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Elderly).WithMany(p => p.Activities)
                .HasForeignKey(d => d.ElderlyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Activity__Elderl__7E37BEF6");
        });

        modelBuilder.Entity<ActivitySchedule>(entity =>
        {
            entity.HasKey(e => e.ActivityScheduleId).HasName("PK__Activity__273CEBBF773782F4");

            entity.ToTable("ActivitySchedule");

            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Activity).WithMany(p => p.ActivitySchedules)
                .HasForeignKey(d => d.ActivityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ActivityS__Activ__7F2BE32F");
        });

        modelBuilder.Entity<BloodGlucose>(entity =>
        {
            entity.HasKey(e => e.BloodGlucoseId).HasName("PK__BloodGlu__D56DFCB3E940D72E");

            entity.ToTable("BloodGlucose");

            entity.Property(e => e.BloodGlucose1)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("BloodGlucose");
            entity.Property(e => e.BloodGlucoseSource).HasMaxLength(255);
            entity.Property(e => e.CreatedBy).HasMaxLength(55);
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Time).HasMaxLength(50);

            entity.HasOne(d => d.Elderly).WithMany(p => p.BloodGlucoses)
                .HasForeignKey(d => d.ElderlyId)
                .HasConstraintName("FK__BloodGluc__Elder__6CD828CA");
        });

        modelBuilder.Entity<BloodPressure>(entity =>
        {
            entity.HasKey(e => e.BloodPressureId).HasName("PK__BloodPre__B6BB8B4E951D12AE");

            entity.ToTable("BloodPressure");

            entity.Property(e => e.CreatedBy).HasMaxLength(55);
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.DiastolicSource).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SystolicSource).HasMaxLength(255);

            entity.HasOne(d => d.Elderly).WithMany(p => p.BloodPressures)
                .HasForeignKey(d => d.ElderlyId)
                .HasConstraintName("FK__BloodPres__Elder__671F4F74");
        });

        modelBuilder.Entity<Book>(entity =>
        {
            entity.HasKey(e => e.BookId).HasName("PK__Book__3DE0C207C04FCD7F");

            entity.ToTable("Book");

            entity.Property(e => e.Author).HasMaxLength(50);
            entity.Property(e => e.BookName).HasMaxLength(100);
            entity.Property(e => e.BookType).HasMaxLength(50);
            entity.Property(e => e.BookUrl).HasColumnName("BookURL");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.PublishDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.Account).WithMany(p => p.Books)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Book__AccountId__4959E263");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasKey(e => e.BookingId).HasName("PK__Booking__73951AED56E58162");

            entity.ToTable("Booking");

            entity.Property(e => e.BookingDate).HasColumnType("datetime");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Account).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Booking__Account__02084FDA");

            entity.HasOne(d => d.Elderly).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.ElderlyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Booking__Elderly__01142BA1");

            entity.HasOne(d => d.Subscription).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.SubscriptionId)
                .HasConstraintName("FK__Booking__SubscriptionId__00200768");

            entity.HasOne(d => d.Transaction).WithMany(p => p.Bookings)
                .HasForeignKey(d => d.TransactionId)
                .HasConstraintName("FK__Booking__Transac__11158940");
        });

        modelBuilder.Entity<ContentProvider>(entity =>
        {
            entity.HasKey(e => e.ContentProviderId).HasName("PK__ContentP__B6C9992AF6A5A4B9");

            entity.ToTable("ContentProvider");

            entity.HasIndex(e => e.AccountId, "UQ__ContentP__349DA5A79C25F4C0").IsUnique();

            entity.Property(e => e.Organization)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Account).WithOne(p => p.ContentProvider)
                .HasForeignKey<ContentProvider>(d => d.AccountId)
                .HasConstraintName("FK__ContentPr__Accou__03F0984C");
        });

        modelBuilder.Entity<Elderly>(entity =>
        {
            entity.HasKey(e => e.ElderlyId).HasName("PK__Elderly__8E4AA9597126FF96");

            entity.ToTable("Elderly");

            entity.HasIndex(e => e.AccountId, "UQ__Elderly__349DA5A7A2068C0F").IsUnique();

            entity.Property(e => e.Allergy).HasMaxLength(100);
            entity.Property(e => e.Height).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.LivingSituation).HasMaxLength(50);
            entity.Property(e => e.MedicalRecord).HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Weight).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Account).WithOne(p => p.Elderly)
                .HasForeignKey<Elderly>(d => d.AccountId)
                .HasConstraintName("FK__Elderly__Account__04E4BC85");
        });

        modelBuilder.Entity<EmergencyConfirmation>(entity =>
        {
            entity.HasKey(e => e.EmergencyConfirmationId).HasName("PK__Emergenc__FE2C2E4480AAD319");

            entity.ToTable("EmergencyConfirmation");

            entity.Property(e => e.ConfirmationDate).HasColumnType("datetime");
            entity.Property(e => e.EmergencyDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.ConfirmationAccount).WithMany(p => p.EmergencyConfirmations)
                .HasForeignKey(d => d.ConfirmationAccountId)
                .HasConstraintName("FK__Emergency__Confi__28ED12D1");

            entity.HasOne(d => d.Elderly).WithMany(p => p.EmergencyConfirmations)
                .HasForeignKey(d => d.ElderlyId)
                .HasConstraintName("FK__Emergency__Elder__27F8EE98");
        });

        modelBuilder.Entity<EmergencyInformation>(entity =>
        {
            entity.HasKey(e => e.EmergencyInformationId).HasName("PK__Emergenc__56930A9B442C835A");

            entity.ToTable("EmergencyInformation");

            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.Latitude).HasMaxLength(50);
            entity.Property(e => e.Longitude).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.EmergencyConfirmation).WithMany(p => p.EmergencyInformations)
                .HasForeignKey(d => d.EmergencyConfirmationId)
                .HasConstraintName("FK__Emergency__Emerg__2BC97F7C");
        });

        modelBuilder.Entity<FamilyMember>(entity =>
        {
            entity.HasKey(e => e.FamilyMemberId).HasName("PK__FamilyMe__B7AD6D93093EA00A");

            entity.ToTable("FamilyMember");

            entity.HasIndex(e => e.AccountId, "UQ__FamilyMe__349DA5A759589B1E").IsUnique();

            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Account).WithOne(p => p.FamilyMember)
                .HasForeignKey<FamilyMember>(d => d.AccountId)
                .HasConstraintName("FK__FamilyMem__Accou__07C12930");
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PK__Group__149AF36A34004E88");

            entity.ToTable("Group");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.GroupName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<GroupMember>(entity =>
        {
            entity.HasKey(e => e.GroupMemberId).HasName("PK__GroupMem__34481292ABAEC82E");

            entity.ToTable("GroupMember");

            entity.HasIndex(e => new { e.GroupId, e.AccountId }, "UQ__GroupMem__67D32931CD6D3D4D").IsUnique();

            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Account).WithMany(p => p.GroupMembers)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__GroupMemb__Accou__0B91BA14");

            entity.HasOne(d => d.Group).WithMany(p => p.GroupMembers)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__GroupMemb__Group__0C85DE4D");
        });

        modelBuilder.Entity<HealthIndicatorBase>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HealthIn__3214EC0774C43183");

            entity.ToTable("HealthIndicatorBase");

            entity.Property(e => e.MaxValue).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MinValue).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Time).HasMaxLength(50);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.Account).WithMany(p => p.HealthIndicatorBases)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__HealthInd__Accou__382F5661");
        });

        modelBuilder.Entity<HeartRate>(entity =>
        {
            entity.HasKey(e => e.HeartRateId).HasName("PK__HeartRat__1FFE19891DF8BE79");

            entity.ToTable("HeartRate");

            entity.Property(e => e.CreatedBy).HasMaxLength(55);
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.HeartRate1).HasColumnName("HeartRate");
            entity.Property(e => e.HeartRateSource).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);

            entity.HasOne(d => d.Elderly).WithMany(p => p.HeartRates)
                .HasForeignKey(d => d.ElderlyId)
                .HasConstraintName("FK__HeartRate__Elder__69FBBC1F");
        });

        modelBuilder.Entity<Height>(entity =>
        {
            entity.HasKey(e => e.HeightId).HasName("PK__Height__BF48562F44B6A3DF");

            entity.ToTable("Height");

            entity.Property(e => e.CreatedBy).HasMaxLength(55);
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.Height1)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Height");
            entity.Property(e => e.HeightSource).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);

            entity.HasOne(d => d.Elderly).WithMany(p => p.Heights)
                .HasForeignKey(d => d.ElderlyId)
                .HasConstraintName("FK__Height__ElderlyI__4E53A1AA");
        });

        modelBuilder.Entity<Iotdevice>(entity =>
        {
            entity.HasKey(e => e.DeviceId).HasName("PK__IOTDevic__49E12311CA337122");

            entity.ToTable("IOTDevice");

            entity.Property(e => e.DeviceName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastConnected).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.SerialNumber).HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Elderly).WithMany(p => p.Iotdevices)
                .HasForeignKey(d => d.ElderlyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__IOTDevice__Elder__0E6E26BF");
        });

        modelBuilder.Entity<KidneyFunction>(entity =>
        {
            entity.HasKey(e => e.KidneyFunctionId).HasName("PK__KidneyFu__55187E7A17F76ACE");

            entity.ToTable("KidneyFunction");

            entity.Property(e => e.Bun)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("BUN");
            entity.Property(e => e.CreatedBy).HasMaxLength(55);
            entity.Property(e => e.Creatinine).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.EGfr)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("eGFR");
            entity.Property(e => e.KidneyFunctionSource).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);

            entity.HasOne(d => d.Elderly).WithMany(p => p.KidneyFunctions)
                .HasForeignKey(d => d.ElderlyId)
                .HasConstraintName("FK__KidneyFun__Elder__756D6ECB");
        });

        modelBuilder.Entity<Lesson>(entity =>
        {
            entity.HasKey(e => e.LessonId).HasName("PK__Lesson__B084ACD0D1280DF7");

            entity.ToTable("Lesson");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.LessonName).HasMaxLength(100);
            entity.Property(e => e.LessonUrl).HasColumnName("LessonURL");
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.Account).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Lesson__AccountI__42ACE4D4");

            entity.HasOne(d => d.Playlist).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.PlaylistId)
                .HasConstraintName("FK__Lesson__Playlist__41B8C09B");
        });

        modelBuilder.Entity<LipidProfile>(entity =>
        {
            entity.HasKey(e => e.LipidProfileId).HasName("PK__LipidPro__5B5E777C67E99247");

            entity.ToTable("LipidProfile");

            entity.Property(e => e.CreatedBy).HasMaxLength(55);
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.Hdlcholesterol)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("HDLCholesterol");
            entity.Property(e => e.Ldlcholesterol)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("LDLCholesterol");
            entity.Property(e => e.LipidProfileSource).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TotalCholesterol).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Triglycerides).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.Elderly).WithMany(p => p.LipidProfiles)
                .HasForeignKey(d => d.ElderlyId)
                .HasConstraintName("FK__LipidProf__Elder__6FB49575");
        });

        modelBuilder.Entity<LiverEnzyme>(entity =>
        {
            entity.HasKey(e => e.LiverEnzymesId).HasName("PK__LiverEnz__96CA6DE97146A8DF");

            entity.Property(e => e.Alp)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ALP");
            entity.Property(e => e.Alt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("ALT");
            entity.Property(e => e.Ast)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("AST");
            entity.Property(e => e.CreatedBy).HasMaxLength(55);
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.Ggt)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("GGT");
            entity.Property(e => e.LiverEnzymesSource).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);

            entity.HasOne(d => d.Elderly).WithMany(p => p.LiverEnzymes)
                .HasForeignKey(d => d.ElderlyId)
                .HasConstraintName("FK__LiverEnzy__Elder__72910220");
        });

        modelBuilder.Entity<Medication>(entity =>
        {
            entity.HasKey(e => e.MedicationId).HasName("PK__Medicati__62EC1AFA40A3EE22");

            entity.ToTable("Medication");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Dosage).HasMaxLength(20);
            entity.Property(e => e.FrequencyType).HasMaxLength(20);
            entity.Property(e => e.MedicationName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Note).HasMaxLength(255);
            entity.Property(e => e.Shape).HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Treatment).HasMaxLength(100);

            entity.HasOne(d => d.Elderly).WithMany(p => p.Medications)
                .HasForeignKey(d => d.ElderlyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Medicatio__Elder__14270015");

            entity.HasOne(d => d.Prescription).WithMany(p => p.Medications)
                .HasForeignKey(d => d.PrescriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Medicatio__Presc__2BFE89A6");
        });

        modelBuilder.Entity<MedicationSchedule>(entity =>
        {
            entity.HasKey(e => e.MedicationScheduleId).HasName("PK__Medicati__EDCDE99C09A80189");

            entity.ToTable("MedicationSchedule");

            entity.Property(e => e.DateTaken).HasColumnType("datetime");
            entity.Property(e => e.Dosage)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Medication).WithMany(p => p.MedicationSchedules)
                .HasForeignKey(d => d.MedicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Medicatio__Medic__17036CC0");
        });

        modelBuilder.Entity<Music>(entity =>
        {
            entity.HasKey(e => e.MusicId).HasName("PK__Music__11F840007C779ACD");

            entity.ToTable("Music");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.MusicName).HasMaxLength(100);
            entity.Property(e => e.MusicUrl).HasColumnName("MusicURL");
            entity.Property(e => e.Singer).HasMaxLength(50);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.Account).WithMany(p => p.Musics)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Music__AccountId__467D75B8");

            entity.HasOne(d => d.Playlist).WithMany(p => p.Musics)
                .HasForeignKey(d => d.PlaylistId)
                .HasConstraintName("FK__Music__PlaylistI__4589517F");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E122022E05E");

            entity.ToTable("Notification");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Message).HasMaxLength(255);
            entity.Property(e => e.NotificationType)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Account).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Notificat__Accou__19DFD96B");
        });

        modelBuilder.Entity<Playlist>(entity =>
        {
            entity.HasKey(e => e.PlaylistId).HasName("PK__Playlist__B30167A0F60AE6CC");

            entity.ToTable("Playlist");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.PlaylistName).HasMaxLength(100);
            entity.Property(e => e.Status).HasMaxLength(20);

            entity.HasOne(d => d.Account).WithMany(p => p.Playlists)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Playlist__Accoun__3EDC53F0");
        });

        modelBuilder.Entity<Prescription>(entity =>
        {
            entity.HasKey(e => e.PrescriptionId).HasName("PK__Prescrip__40130832DAFDAA42");

            entity.ToTable("Prescription");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Url).IsRequired();

            entity.HasOne(d => d.ElderlyNavigation).WithMany(p => p.Prescriptions)
                .HasForeignKey(d => d.Elderly)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Prescript__Elder__2B0A656D");
        });

        modelBuilder.Entity<Professor>(entity =>
        {
            entity.HasKey(e => e.ProfessorId).HasName("PK__Professo__90035949D3A95ADB");

            entity.ToTable("Professor");

            entity.HasIndex(e => e.AccountId, "UQ__Professo__349DA5A73244F108").IsUnique();

            entity.Property(e => e.ClinicAddress).HasMaxLength(100);
            entity.Property(e => e.ConsultationFee).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Rating).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Account).WithOne(p => p.Professor)
                .HasForeignKey<Professor>(d => d.AccountId)
                .HasConstraintName("FK__Professor__Accou__1AD3FDA4");
        });

        modelBuilder.Entity<ProfessorAppointment>(entity =>
        {
            entity.HasKey(e => e.ProfessorAppointmentId).HasName("PK__Professo__CBB3A52E3FF712DD");

            entity.ToTable("ProfessorAppointment");

            entity.Property(e => e.AppointmentTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Booking).WithMany(p => p.ProfessorAppointments)
                .HasForeignKey(d => d.BookingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Professor__Booki__1BC821DD");

            entity.HasOne(d => d.Elderly).WithMany(p => p.ProfessorAppointments)
                .HasForeignKey(d => d.ElderlyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Professor__Elder__1CBC4616");

            entity.HasOne(d => d.TimeSlot).WithMany(p => p.ProfessorAppointments)
                .HasForeignKey(d => d.TimeSlotId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Professor__TimeS__1DB06A4F");
        });

        modelBuilder.Entity<ProfessorRating>(entity =>
        {
            entity.HasKey(e => e.ProfessorRatingId).HasName("PK__Professo__4B8DB8B312A887BD");

            entity.ToTable("ProfessorRating");

            entity.Property(e => e.Rating).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.RatingComment).HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Elderly).WithMany(p => p.ProfessorRatings)
                .HasForeignKey(d => d.ElderlyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Professor__Elder__1EA48E88");

            entity.HasOne(d => d.Professor).WithMany(p => p.ProfessorRatings)
                .HasForeignKey(d => d.ProfessorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Professor__Profe__1F98B2C1");
        });

        modelBuilder.Entity<ProfessorSchedule>(entity =>
        {
            entity.HasKey(e => e.ProfessorScheduleId).HasName("PK__Professo__A283D5B48DC576EB");

            entity.ToTable("ProfessorSchedule");

            entity.Property(e => e.DayOfWeek).HasMaxLength(50);
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Professor).WithMany(p => p.ProfessorSchedules)
                .HasForeignKey(d => d.ProfessorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Professor__Profe__208CD6FA");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE1A23CDDE19");

            entity.ToTable("Role");

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<Subscription>(entity =>
        {
            entity.HasKey(e => e.SubscriptionId).HasName("PK__Subscription__DD42582E2711938B");

            entity.ToTable("Subscription");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Fee).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Subscriptions)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Subscript__Accou__0C50D423");
        });

        modelBuilder.Entity<TimeSlot>(entity =>
        {
            entity.HasKey(e => e.TimeSlotId).HasName("PK__TimeSlot__41CC1F32052FCAA7");

            entity.ToTable("TimeSlot");

            entity.Property(e => e.Note).HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.ProfessorSchedule).WithMany(p => p.TimeSlots)
                .HasForeignKey(d => d.ProfessorScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__TimeSlot__Profes__2180FB33");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PK__Transact__55433A6B19FA58ED");

            entity.ToTable("Transaction");

            entity.HasIndex(e => e.BookingId, "UQ_Transaction_BookingId").IsUnique();

            entity.Property(e => e.PaymentCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentLink)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PaymentStatus)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);

            entity.HasOne(d => d.Account).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Transacti__Accou__22751F6C");

            entity.HasOne(d => d.Booking).WithOne(p => p.TransactionNavigation)
                .HasForeignKey<Transaction>(d => d.BookingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Transacti__Booki__236943A5");
        });

        modelBuilder.Entity<UserLink>(entity =>
        {
            entity.HasKey(e => e.UserLinkId).HasName("PK__UserLink__36BB989DA8E38988");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RelationshipType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.AccountId1Navigation).WithMany(p => p.UserLinkAccountId1Navigations)
                .HasForeignKey(d => d.AccountId1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Relationship_Account1");

            entity.HasOne(d => d.AccountId2Navigation).WithMany(p => p.UserLinkAccountId2Navigations)
                .HasForeignKey(d => d.AccountId2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Relationship_Account2");
        });

        modelBuilder.Entity<UserSubscription>(entity =>
        {
            entity.HasKey(e => e.UserSubscriptionId).HasName("PK__UserSubs__D1FD777C9B007DED");

            entity.ToTable("UserSubscription");

            entity.Property(e => e.UserSubscriptionId).ValueGeneratedNever();
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(10);

            entity.HasOne(d => d.Booking).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.BookingId)
                .HasConstraintName("FK__UserSubsc__Booki__0F2D40CE");

            entity.HasOne(d => d.Professor).WithMany(p => p.UserSubscriptions)
                .HasForeignKey(d => d.ProfessorId)
                .HasConstraintName("FK__UserSubsc__Profe__10216507");
        });

        modelBuilder.Entity<Weight>(entity =>
        {
            entity.HasKey(e => e.WeightId).HasName("PK__Weight__02A0F31B0E0D250C");

            entity.ToTable("Weight");

            entity.Property(e => e.CreatedBy).HasMaxLength(55);
            entity.Property(e => e.DateRecorded).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Weight1)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Weight");
            entity.Property(e => e.WeightSource).HasMaxLength(255);

            entity.HasOne(d => d.Elderly).WithMany(p => p.Weights)
                .HasForeignKey(d => d.ElderlyId)
                .HasConstraintName("FK__Weight__ElderlyI__4B7734FF");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}